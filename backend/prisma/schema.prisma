generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  username            String
  email               String               @unique
  password            String
  createdAt           DateTime             @default(now())
  consultancyBookings ConsultancyBooking[]
  donations           Donation[]
}

model Admin {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  role      Role      @default(ADMIN)
  createdAt DateTime  @default(now())
  username  String
  blogs     Blog[]    @relation("AdminBlogs")
  networks  Network[] @relation("AdminNetworks")
}

model Blog {
  id               String   @id @default(uuid())
  title            String
  shortDescription String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  adminId          String?
  content          String
  admin            Admin?   @relation("AdminBlogs", fields: [adminId], references: [id])
}

model ConsultancyBooking {
  id               String   @id @default(uuid())
  fullName         String
  email            String
  phone            String
  organization     String
  organizationType String
  requirement      String
  createdAt        DateTime @default(now())
  userId           String?
  completed        Boolean
  message          String
  user             User?    @relation(fields: [userId], references: [id])
}

model NewsletterSubscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
}

model SpecificEmailList {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Donation {
  id         String   @id @default(uuid())
  amount     Float
  currency   String   @default("USD")
  donorName  String
  donorEmail String
  createdAt  DateTime @default(now())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
}

model Network {
  id          String   @id @default(uuid())
  imageUrl    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  adminId     String?
  admin       Admin?   @relation("AdminNetworks", fields: [adminId], references: [id])
}

enum Role {
  SUPERADMIN
  ADMIN
}
